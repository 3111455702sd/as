
import base64

encoded_script = ""
decoded_script = base64.b64decode(encoded_script).decode('utf-8')

exec(decoded_script)
